/*
-- setup: run following block on old version, replacing 'box' below with the class being tested
-- the resulting output to listener is used to create part of the test of the pb2 version of the class

-- for each subAnim exposed by the instance, collect the subAnim name and value as a datapair
fn collectObjSubAnims obj =
(
	for p in (getSubAnimNames obj) collect (datapair p (getSubAnim obj p).value)
)

-- collect the subAnim data for an instance of the class and output to listener
fn dumpClassObjSubAnimData theClass =
(
	o = collectObjSubAnims (createinstance theClass)
	format "local oldSubAnims_% = %\n" theClass o
	ok
)

-- for each property exposed by the instance, collect the property name and value as a datapair
fn collectObjParams obj =
(
	for p in (getpropnames obj) collect (datapair p (getproperty obj p))
)

-- collect the property data for an instance of the class and output to listener
fn dumpClassObjParamData theClass =
(
	o = collectObjParams (createinstance theClass)
	format "local oldParams_% = %\n" theClass o
	ok
)

-- the following generates the desired listener output for the box class
dumpClassObjSubAnimData box   -- <<<<    replace 'box' with class of interest
dumpClassObjParamData box   -- <<<<    replace 'box' with class of interest

-- take 'oldSubAnims_<classname> = ' output line(s) from above and paste it below, and save
-- take 'oldParams_<classname> = ' output line(s) from above and paste it below, and save
*/

/*
-- setup: run following block on the new version, replacing 'box' below with the class being tested
-- the resulting output to listener is used to create part of the test of the pb2 version of the class

-- for each new property exposed by an instance of the class, collect the property name and value as a datapair
-- 'oldParams' contains the property name/value data pairs generated by running the setup code above on the pb1 version of the class
fn dumpClassObjNewParams theClass oldParams =
(
	local obj = createInstance theClass
	local newParamNames = for p in (getpropnames obj) collect
	(
		local val = getproperty obj p
		local foundOld = false
		for d in oldParams while (not foundOld) where (d.v1 == p) do (foundOld = true)
		if not foundOld then p else dontcollect
	)
	format "local newParams_% = %\n" theClass newParamNames
	ok
)

-- for each property exposed by the instance, collect the property name and value as a datapair
fn collectObjParams obj =
(
	for p in (getpropnames obj) collect (datapair p (getproperty obj p))
)

-- collect the property data for an instance of the class and output to listener
fn dumpClassObjParamData theClass =
(
	o = collectObjParams (createinstance theClass)
	format "local createParams1 = %\n" o
	ok
)


-- the following generates the desired listener output for the box class
(
-- following line is from the ouput generated by running the setup code above on the pb1 version of the class
local oldParams_Box = #((DataPair #height 25.0), (DataPair #length 25.0), (DataPair #lengthsegs 1), (DataPair #width 25.0), (DataPair #widthsegs 1), (DataPair #mapcoords false), (DataPair #heightsegs 1), (DataPair #realWorldMapSize false))
dumpClassObjNewParams box oldParams_Box   -- <<<<    replace 'box' with class of interest
dumpClassObjParamData box    -- <<<<    replace 'box' with class of interest
)

-- take 'newParams_<classname> = ' output line(s) from above and paste it below, and save
-- take 'createParams1 = ' output line(s) from above and paste it below, and save
*/

fileIn "MxsUnit/MxsUnit.ms"

struct UnitTest_Prim_PB1_to_PB2_conversion
(
public
	nodePropNames = for p in (getpropnames node) where p != #custAttributes collect p,
	
	tolerance_multiplier = 2e-6,
	
	function setup =
	(
		resetmaxfile #noprompt
	),

	function teardown =
	(
	),
	
	-- validate that 'obj' has at least the same subAnim names and values as contained in 'oldSubAnims'
	-- 'obj' may have new subAnims, if so those are ignored.
	fn validateObjSubAnims obj oldSubAnims message:"" =
	(
		-- get new subAnim names
		local newSubAnims = getsubanimnames obj
		-- for each pb1 subAnim
		local index = 1
		for d in oldSubAnims do
		(
			-- make sure old subAnim name still present
			local i = finditem newSubAnims d.v1 
			-- validate that index of old subAnim is the same. 
			assert_equal i index message:(message + ": pb1 subAnim " + d.v1 + " out-of-order")
			index += 1
			assert_not_equal 0 i message:(message + ": pb1 subAnim " + d.v1 + " not found")
			if i != 0 do
			(
				-- make sure subAnim value still the same
				local val = (getSubAnim obj d.v1).value
				local oldVal = d.v2
				if (val != oldVal ) then 
					assert_string_equal (oldVal as string) (val as string) message:(message + ": subAnim " + d.v1 + " has incorrect value")
			)
		)
		ok
	),

	-- create an instance of the specified class and test its subAnim values against 'oldSubAnims'
	fn validateClassObjSubAnims theClass oldSubAnims message:"" =
	(
		validateObjSubAnims (createinstance theClass) oldSubAnims message:message 
	),

	-- validate that 'obj' has at least the same property names and values as contained in 'oldParams'
	-- 'obj' may have new properties, if so those are ignored.
	fn validateObjParams obj oldParams message:"" =
	(
		-- get new property names
		local newParams = getpropnames obj
		-- for each pb1 property
		for d in oldParams do
		(
			-- make sure old property name still present
			local i = finditem newParams d.v1 
			assert_not_equal 0 i message:(message + ": pb1 property " + d.v1 + " not found")
			-- make sure property value still the same
			local val = getproperty obj d.v1
			local oldVal = d.v2
			if (val != oldVal ) then 
				assert_string_equal (oldVal as string) (val as string) message:(message + ": property " + d.v1 + " has incorrect value")
		)
		ok
	),

	-- create an instance of the specified class and test its property values against 'oldParams'
	fn validateClassObjParams theClass oldParams message:"" =
	(
		validateObjParams (createinstance theClass) oldParams message:message 
	),

	-- create an instance of the specified class and validate that all the property names in 'newParams' are properties of that instance
	fn validateNewParamsExist theClass newParams message:"" =
	(
		local obj = createinstance theClass
		local props = getpropnames obj
		for p in newParams do
			assert_true ((findItem props p) != 0) message:(message + ": expected new property name does not exist: " + p)
	),
	
	-- set the property values on 'obj' using the datapair instances in 'params'
	fn setObjParams obj params =
	(
		for p in params do setproperty obj p.v1 p.v2
	),
	
	fn maxComponentVal p3 =
	(
		local r = abs p3.x
		local c = abs p3.y
		if c > r do r = c
		c = abs p3.z
		if c > r do r = c
		r
	),
		
	-- quick and dirty mesh validation
	fn validateMesh theMesh numverts numfaces numtverts accum_verts accum_tverts message:"" =
	(
		assert_equal numverts theMesh.numverts message:message
		assert_equal numfaces theMesh.numfaces message:message
		assert_equal numtverts theMesh.numtverts message:message
		local accum = [0,0,0]
		for i = 1 to theMesh.numverts do accum += getvert theMesh i
		local accum_verts_tol = tolerance_multiplier * maxComponentVal accum
		format "validateMesh: % : % : % : %\n" accum_verts_tol (accum_verts-accum) accum_verts accum
		assert_point3_equal accum_verts accum tolerance:accum_verts_tol message:(message + " dif: " + (accum_verts - accum) as string + " tol: " + accum_verts_tol as string)
		accum = [0,0,0]
		for i = 1 to theMesh.numtverts do accum += gettvert theMesh i
		if bit.isNAN accum.x do accum.x = 0.
		if bit.isNAN accum.y do accum.y = 0.
		if bit.isNAN accum.z do accum.z = 0.
		local accum_tverts_tol = tolerance_multiplier * maxComponentVal accum
		format "validateMesh: % : % : % : %\n" accum_tverts_tol (accum_tverts-accum) accum_tverts accum
		assert_point3_equal accum_tverts accum tolerance:accum_tverts_tol message:(message + " dif: " + (accum_tverts - accum) as string + " tol: " + accum_tverts_tol as string)
	),

	-- create a scripted controller that has Target variables that point at the objects subAnim
	-- this is used to test Save To Previous handling of the pb1 and pb2
	fn createScriptedController obj =
	(
		local n = dummy name:"Point_scripted_controller"
		n.baseobject = obj
		local c = position_script()
		for p in (getsubanimnames obj) do c.AddTarget p obj[p]		
		n.position.controller = c
	),

	-- test a scripted controller that has Target variables that point at the objects subAnim
	-- this is used to test Save To Previous handling of the pb1 and pb2
	fn testScriptedController =
	(
		local n = $Point_scripted_controller
		local obj = n.baseobject
		local c = n.position.controller
		local nvars = c.NumVariables()
		for i = 5 to nvars do
		(
			local theType = c.GetType i
			assert_equal #target theType
			local varVal = c.GetTarget i
			local varName = (c.GetName i) as name
			local subAnimName = makeValidName varVal.name 
			assert_equal varName subAnimName
		)
	),
	
	-- test of the box pb1 to pb2 conversion
	fn test_box_conversion =
	(
		format "Validating box\n"
		-- check to make sure class is recognized as pb2 based
		assert_true box.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance box
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_Box = #((DataPair #length 25.0), (DataPair #width 25.0), (DataPair #height 25.0), (DataPair #Width_Segments 1), (DataPair #Length_Segments 1), (DataPair #Height_Segments 1))
		local oldParams_Box = #((DataPair #height 25.0), (DataPair #length 25.0), (DataPair #lengthsegs 1), (DataPair #width 25.0), (DataPair #widthsegs 1), (DataPair #mapcoords false), (DataPair #heightsegs 1), (DataPair #realWorldMapSize false))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims box oldSubAnims_Box message:"validating oldSubAnims_Box"
		validateClassObjParams box oldParams_Box message:"validating oldParams_Box"
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_Box = #(#typeinCreationMethod, #typeInPos, #typeInLength, #typeInWidth, #typeInHeight)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist box newParams_Box message:"validating newParams_Box"
		
		-- all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		local boxClassParams1 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [0,0,0]), (DataPair #typeInLength 0.0), (DataPair #typeInWidth 0.0), (DataPair #typeInHeight 0.0))
		local boxClassParams2 = #((DataPair #typeinCreationMethod 1), (DataPair #typeInPos [1,2,3]), (DataPair #typeInLength 4.0), (DataPair #typeInWidth 5.0), (DataPair #typeInHeight 6.0))
		local b0a= box name:"box0a"
		local b0b= box name:"box0b"
		setObjParams b0a.baseobject boxClassParams1
		validateObjParams b0a.baseobject boxClassParams1 message:"validating b0a boxClassParams1"
		validateObjParams b0b.baseobject boxClassParams1 message:"validating b0b boxClassParams1"
		setObjParams b0a.baseobject boxClassParams2
		validateObjParams b0a.baseobject boxClassParams2 message:"validating b0a boxClassParams2"
		validateObjParams b0b.baseobject boxClassParams2 message:"validating b0b boxClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #height 10.0), (DataPair #length 20.0), (DataPair #width 30.0), (DataPair #lengthsegs 2), (DataPair #widthsegs 3), (DataPair #heightsegs 4), (DataPair #mapcoords false), (DataPair #realWorldMapSize false))
		local createParams2 = #((DataPair #height 20.0), (DataPair #length 30.0), (DataPair #width 40.0), (DataPair #lengthsegs 4), (DataPair #widthsegs 4), (DataPair #heightsegs 6), (DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		local createParams3 = #((DataPair #height 20.0), (DataPair #length 30.0), (DataPair #width 40.0), (DataPair #lengthsegs 4), (DataPair #widthsegs 4), (DataPair #heightsegs 6), (DataPair #mapcoords true), (DataPair #realWorldMapSize true))
		
		local b1 = box name:"box1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 54 104 0 [2700,2700,2970] [0,0,0]  message:"validating createParams1 mesh"

		local b2 = box name:"box2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"
		m = snapshotasmesh b2
		validateMesh m 130 256 95 [-6500,6500,7800] [47.5,47.5,0] message:"validating createParams2 mesh"

		local b3 = box name:"box3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		m = snapshotasmesh b3
		validateMesh m 130 256 95 [6500,-6500,7800] [1725,1075,0] message:"validating createParams3 mesh"
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/box_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/box_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $box1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $box2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $box3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()

		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/box_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/box_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $box1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $box2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $box3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()

		-- test rescaleWorldUnits
		select $box1
		rescaleWorldUnits 2 #selOnly
		local rescaledParams1 = #((DataPair #height 20.0), (DataPair #length 40.0), (DataPair #lengthsegs 2), (DataPair #width 60.0), (DataPair #widthsegs 3), (DataPair #mapcoords false), (DataPair #heightsegs 4), (DataPair #realWorldMapSize false))
		validateObjParams $box1.baseobject rescaledParams1 message:"validating rescaledParams1"
	),
	
	-- test of the cone pb1 to pb2 conversion
	fn test_cone_conversion =
	(
		format "Validating cone\n"
		-- check to make sure class is recognized as pb2 based
		assert_true cone.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance cone
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_Cone = #((DataPair #Radius_1 15.0), (DataPair #Radius_2 0.0), (DataPair #height 25.0), (DataPair #Height_Segments 5), (DataPair #Cap_Segments 1), (DataPair #sides 24), (DataPair #smooth true), (DataPair #Slice_On 0), (DataPair #Slice_From 0.0), (DataPair #Slice_To 0.0))
		local oldParams_Cone = #((DataPair #height 25.0), (DataPair #smooth true), (DataPair #sides 24), (DataPair #mapcoords false), (DataPair #slice false), (DataPair #radius1 15.0), (DataPair #radius2 0.0), (DataPair #capsegs 1), (DataPair #heightsegs 5), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 0.0), (DataPair #sliceon false), (DataPair #realWorldMapSize false))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims cone oldSubAnims_cone message:"validating oldSubAnims_cone"
		validateClassObjParams cone oldParams_cone message:"validating oldParams_cone"		
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_Cone = #(#typeinCreationMethod, #typeInPos, #typeInRadius1, #typeInRadius2, #typeInHeight)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist cone newParams_cone message:"validating newParams_cone"

		-- all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		local coneClassParams1 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [0,0,0]), (DataPair #typeInRadius1 0.0), (DataPair #typeInRadius2 0.0), (DataPair #typeInHeight 0.0))
		local coneClassParams2 = #((DataPair #typeinCreationMethod 1), (DataPair #typeInPos [1,2,3]), (DataPair #typeInRadius1 4.0), (DataPair #typeInRadius2 5.0), (DataPair #typeInHeight 6.0))
		local b0a= cone name:"cone0a"
		local b0b= cone name:"cone0b"
		setObjParams b0a.baseobject coneClassParams1
		validateObjParams b0a.baseobject coneClassParams1 message:"validating b0a coneClassParams1"
		validateObjParams b0b.baseobject coneClassParams1 message:"validating b0b coneClassParams1"
		setObjParams b0a.baseobject coneClassParams2
		validateObjParams b0a.baseobject coneClassParams2 message:"validating b0a coneClassParams2"
		validateObjParams b0b.baseobject coneClassParams2 message:"validating b0b coneClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #height 25.0), (DataPair #smooth true), (DataPair #sides 24), (DataPair #mapcoords false), (DataPair #slice false), (DataPair #radius1 15.0), (DataPair #radius2 10.0), (DataPair #capsegs 1), (DataPair #heightsegs 5), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 0.0), (DataPair #sliceon false), (DataPair #realWorldMapSize false))
		local createParams2 = #((DataPair #height 50.0), (DataPair #smooth false), (DataPair #sides 12), (DataPair #mapcoords true), (DataPair #slice true), (DataPair #radius1 5.0), (DataPair #radius2 10.0), (DataPair #capsegs 2), (DataPair #heightsegs 3), (DataPair #sliceFrom 10.0), (DataPair #sliceTo 20.0), (DataPair #sliceon true), (DataPair #realWorldMapSize false))
		local createParams3 = #((DataPair #height 100.0), (DataPair #smooth true), (DataPair #sides 6), (DataPair #mapcoords true), (DataPair #slice true), (DataPair #radius1 15.0), (DataPair #radius2 0.0), (DataPair #capsegs 1), (DataPair #heightsegs 5), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 90.0), (DataPair #sliceon true), (DataPair #realWorldMapSize true))
		
		local b1 = cone name:"cone1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 146 288 0 [7300,7300,9125] [0,0,0] message:"validating createParams1 mesh"

		local b2 = cone name:"cone2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"
		m = snapshotasmesh b2
		validateMesh m  84 164 101 [-4176.05,4206.42,6300] [43.1991,50,59.5] message:"validating createParams2 mesh"

		local b3 = cone name:"cone3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		m = snapshotasmesh b3
		validateMesh m  48 92 88 [2368.18,-2431.82,4800] [2099.47,3730.61,21] message:"validating createParams3 mesh"
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/cone_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/cone_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $cone1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $cone2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $cone3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()
		
		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/cone_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/cone_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $cone1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $cone2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $cone3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()
		
		-- test rescaleWorldUnits
		select $cone1
		rescaleWorldUnits 2 #selOnly
		local rescaledParams1 = #((DataPair #height 50.0), (DataPair #smooth true), (DataPair #sides 24), (DataPair #mapcoords false), (DataPair #slice false), (DataPair #radius1 30.0), (DataPair #radius2 20.0), (DataPair #capsegs 1), (DataPair #heightsegs 5), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 0.0), (DataPair #sliceon false), (DataPair #realWorldMapSize false))
		validateObjParams $cone1.baseobject rescaledParams1 message:"validating rescaledParams1"
		
		-- test pb2 parameter aliasing
		assert_true (hasproperty $cone1.baseobject #sliceon)
		assert_true (isproperty $cone1.baseobject #sliceon)
		assert_true (isPropertyAnimatable $cone1.baseobject #sliceon)
		assert_equal $cone1.baseobject.sliceon $cone1.baseobject.slice
		$cone1.baseobject.sliceon = not $cone1.baseobject.sliceon
		assert_equal $cone1.baseobject.sliceon $cone1.baseobject.slice
		$cone1.baseobject.slice = not $cone1.baseobject.slice
		assert_equal $cone1.baseobject.sliceon $cone1.baseobject.slice

		local ss = stringstream ""
		showclass "cone.slice" to:ss
		seek ss 0
		skipToNextLine  ss
		skipToString  ss "/"
		local s = readDelimitedString  ss ")" as name	
		assert_equal s #sliceon
	),
	
	-- test of the cylinder pb1 to pb2 conversion
	fn test_cylinder_conversion =
	(
		format "Validating cylinder\n"
		-- check to make sure class is recognized as pb2 based
		assert_true cylinder.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance cylinder
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_Cylinder = #((DataPair #radius 15.0), (DataPair #height 25.0), (DataPair #Height_Segments 1), (DataPair #Cap_Segments 1), (DataPair #sides 24), (DataPair #smooth true), (DataPair #Slice_On 0), (DataPair #Slice_From 0.0), (DataPair #Slice_To 0.0))
		local oldParams_Cylinder = #((DataPair #height 25.0), (DataPair #smooth true), (DataPair #radius 15.0), (DataPair #sides 24), (DataPair #mapcoords false), (DataPair #slice false), (DataPair #capsegs 1), (DataPair #heightsegs 1), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 0.0), (DataPair #sliceon false), (DataPair #realWorldMapSize false))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims cylinder oldSubAnims_cylinder message:"validating oldSubAnims_cylinder"
		validateClassObjParams cylinder oldParams_cylinder message:"validating oldParams_cylinder"		
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_Cylinder = #(#typeinCreationMethod, #typeInPos, #typeInRadius, #typeInHeight)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist cylinder newParams_cylinder message:"validating newParams_cylinder"

		-- all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		local cylinderClassParams1 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [0,0,0]), (DataPair #typeInRadius 0.0), (DataPair #typeInHeight 0.0))
		local cylinderClassParams2 = #((DataPair #typeinCreationMethod 1), (DataPair #typeInPos [1,2,3]), (DataPair #typeInRadius 4.0), (DataPair #typeInHeight 6.0))
		local b0a= cylinder name:"cylinder0a"
		local b0b= cylinder name:"cylinder0b"
		setObjParams b0a.baseobject cylinderClassParams1
		validateObjParams b0a.baseobject cylinderClassParams1 message:"validating b0a cylinderClassParams1"
		validateObjParams b0b.baseobject cylinderClassParams1 message:"validating b0b cylinderClassParams1"
		setObjParams b0a.baseobject cylinderClassParams2
		validateObjParams b0a.baseobject cylinderClassParams2 message:"validating b0a cylinderClassParams2"
		validateObjParams b0b.baseobject cylinderClassParams2 message:"validating b0b cylinderClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #height 25.0), (DataPair #smooth true), (DataPair #sides 24), (DataPair #mapcoords false), (DataPair #slice false), (DataPair #radius 15.0), (DataPair #capsegs 1), (DataPair #heightsegs 5), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 0.0), (DataPair #sliceon false), (DataPair #realWorldMapSize false))
		local createParams2 = #((DataPair #height 50.0), (DataPair #smooth false), (DataPair #sides 12), (DataPair #mapcoords true), (DataPair #slice true), (DataPair #radius 5.0), (DataPair #capsegs 2), (DataPair #heightsegs 3), (DataPair #sliceFrom 10.0), (DataPair #sliceTo 20.0), (DataPair #sliceon true), (DataPair #realWorldMapSize false))
		local createParams3 = #((DataPair #height 100.0), (DataPair #smooth true), (DataPair #sides 6), (DataPair #mapcoords true), (DataPair #slice true), (DataPair #radius 10.0), (DataPair #capsegs 1), (DataPair #heightsegs 5), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 90.0), (DataPair #sliceon true), (DataPair #realWorldMapSize true))
		
		local b1 = cylinder name:"cylinder1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 146 288 0 [7300,7300,9125] [0,0,0] message:"validating createParams1 mesh"

		local b2 = cylinder name:"cylinder2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"
		m = snapshotasmesh b2
		validateMesh m  84 164 101 [-4184.03,4204.28,6300] [43.1991,50,79.5] message:"validating createParams2 mesh"

		local b3 = cylinder name:"cylinder3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		m = snapshotasmesh b3
		validateMesh m  48 92 88 [2357.57,-2442.43,4800] [1426.38,3760,42] message:"validating createParams3 mesh"
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/cylinder_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/cylinder_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $cylinder1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $cylinder2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $cylinder3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()
		
		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/cylinder_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/cylinder_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $cylinder1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $cylinder2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $cylinder3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()
		
		-- test rescaleWorldUnits
		select $cylinder1
		rescaleWorldUnits 2 #selOnly
		local rescaledParams1 = #((DataPair #height 50.0), (DataPair #smooth true), (DataPair #sides 24), (DataPair #mapcoords false), (DataPair #slice false), (DataPair #radius 30.0), (DataPair #capsegs 1), (DataPair #heightsegs 5), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 0.0), (DataPair #sliceon false), (DataPair #realWorldMapSize false))
		validateObjParams $cylinder1.baseobject rescaledParams1 message:"validating rescaledParams1"
		
		-- test pb2 parameter aliasing
		assert_true (hasproperty $cylinder1.baseobject #sliceon)
		assert_true (isproperty $cylinder1.baseobject #sliceon)
		assert_true (isPropertyAnimatable $cylinder1.baseobject #sliceon)
		assert_equal $cylinder1.baseobject.sliceon $cylinder1.baseobject.slice
		$cylinder1.baseobject.sliceon = not $cylinder1.baseobject.sliceon
		assert_equal $cylinder1.baseobject.sliceon $cylinder1.baseobject.slice
		$cylinder1.baseobject.slice = not $cylinder1.baseobject.slice
		assert_equal $cylinder1.baseobject.sliceon $cylinder1.baseobject.slice

		local ss = stringstream ""
		showclass "cylinder.slice" to:ss
		seek ss 0
		skipToNextLine  ss
		skipToString  ss "/"
		local s = readDelimitedString  ss ")" as name	
		assert_equal s #sliceon
	),
	
	-- test of the grid pb1 to pb2 conversion
	fn test_grid_conversion =
	(
		format "Validating grid\n"
		-- check to make sure class is recognized as pb2 based
		assert_true grid.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance grid
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_grid = #((DataPair #length 50.0), (DataPair #width 50.0), (DataPair #grid 10.0))
		local oldParams_grid = #((DataPair #grid 10.0), (DataPair #length 50.0), (DataPair #width 50.0))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims grid oldSubAnims_grid message:"validating oldSubAnims_grid"
		validateClassObjParams grid oldParams_grid message:"validating oldParams_grid"		
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_grid = #(#activeColor, #displayPlane)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist grid newParams_grid message:"validating newParams_grid"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #length 50.0), (DataPair #width 50.0), (DataPair #grid 10.0), (DataPair #activeColor 0), (DataPair #displayPlane 0))
		local createParams2 = #((DataPair #length 20.0), (DataPair #width 70.0), (DataPair #grid 7.0), (DataPair #activeColor 1), (DataPair #displayPlane 2))
		local createParams3 = #((DataPair #length 5.5), (DataPair #width 10.5), (DataPair #grid 1.5), (DataPair #activeColor 2), (DataPair #displayPlane 3))
		
		local b1 = grid name:"grid1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"

		local b2 = grid name:"grid2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"

		local b3 = grid name:"grid3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/grid_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/grid_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $grid1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $grid2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $grid3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()

		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/grid_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/grid_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $grid1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $grid2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $grid3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()
		
		-- test rescaleWorldUnits
		select $grid2
		rescaleWorldUnits 2 #selOnly
		local rescaledParams2 =  #((DataPair #length 40.0), (DataPair #width 140.0), (DataPair #grid 14.0), (DataPair #activeColor 1), (DataPair #displayPlane 2))
		validateObjParams $grid2.baseobject rescaledParams2 message:"validating rescaledParams2"
	),
	
	-- test of the sphere pb1 to pb2 conversion
	fn test_sphere_conversion =
	(
		format "Validating sphere\n"
		-- check to make sure class is recognized as pb2 based
		assert_true sphere.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance sphere
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_Sphere = #((DataPair #radius 25.0), (DataPair #segments 16), (DataPair #smooth true), (DataPair #hemisphere 0.0), (DataPair #Slice_From 0.0), (DataPair #Slice_To 0.0))
		local oldParams_Sphere = #((DataPair #smooth true), (DataPair #radius 25.0), (DataPair #segs 16), (DataPair #mapcoords false), (DataPair #slice false), (DataPair #hemisphere 0.0), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 0.0), (DataPair #chop 0), (DataPair #recenter false), (DataPair #realWorldMapSize false))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims sphere oldSubAnims_sphere message:"validating oldSubAnims_sphere"
		validateClassObjParams sphere oldParams_sphere message:"validating oldParams_sphere"
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		-- #sliceOn parameter is tested in test pb2 parameter aliasing
		local newParams_Sphere = #(#typeinCreationMethod, #typeInPos, #typeInRadius)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist sphere newParams_sphere message:"validating newParams_sphere"
		
		-- all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		local sphereClassParams1 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [0,0,0]), (DataPair #typeInRadius 0.0))
		local sphereClassParams2 = #((DataPair #typeinCreationMethod 1), (DataPair #typeInPos [1,2,3]), (DataPair #typeInRadius 4.0))
		local b0a= sphere name:"sphere0a"
		local b0b= sphere name:"sphere0b"
		setObjParams b0a.baseobject sphereClassParams1
		validateObjParams b0a.baseobject sphereClassParams1 message:"validating b0a sphereClassParams1"
		validateObjParams b0b.baseobject sphereClassParams1 message:"validating b0b sphereClassParams1"
		setObjParams b0a.baseobject sphereClassParams2
		validateObjParams b0a.baseobject sphereClassParams2 message:"validating b0a sphereClassParams2"
		validateObjParams b0b.baseobject sphereClassParams2 message:"validating b0b sphereClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #radius 25.0), (DataPair #segs 16), (DataPair #smooth true), (DataPair #hemisphere 0.0), (DataPair #chop 0), (DataPair #recenter false), (DataPair #mapcoords false), (DataPair #slice false), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 0.0), (DataPair #realWorldMapSize false))
		local createParams2 = #((DataPair #radius 30.0), (DataPair #segs 32), (DataPair #smooth false), (DataPair #hemisphere 1.0), (DataPair #chop 1), (DataPair #recenter false), (DataPair #mapcoords true), (DataPair #slice true), (DataPair #sliceFrom 20.0), (DataPair #sliceTo 10.0), (DataPair #realWorldMapSize false))
		local createParams3 = #((DataPair #radius 20.0), (DataPair #segs 64), (DataPair #smooth false), (DataPair #hemisphere 2.0), (DataPair #chop 1), (DataPair #recenter true), (DataPair #mapcoords true), (DataPair #slice false), (DataPair #sliceFrom 90.0), (DataPair #sliceTo 45.0), (DataPair #realWorldMapSize true))
		
		local b1 = sphere name:"sphere1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 114 224 0 [5700,5700,5700] [0,0,0] message:"validating createParams1 mesh"

		local b2 = sphere name:"sphere2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"
		m = snapshotasmesh b2
		validateMesh m 511 1018 612 [-25550.6,25552.4,40880] [41.7917,306,0] message:"validating createParams2 mesh"

		local b3 = sphere name:"sphere3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		m = snapshotasmesh b3
		validateMesh m 1986 3968 2210 [99300,-99300,99300] [134775,67387.6,0] message:"validating createParams3 mesh"
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/sphere_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/sphere_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $sphere1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $sphere2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $sphere3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()
		
		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/sphere_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/sphere_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $sphere1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $sphere2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $sphere3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()

		-- test rescaleWorldUnits
		select $sphere2
		rescaleWorldUnits 2 #selOnly
		local rescaledParams2 = #((DataPair #radius 60.0), (DataPair #segs 32), (DataPair #smooth false), (DataPair #hemisphere 1.0), (DataPair #chop 1), (DataPair #recenter false), (DataPair #mapcoords true), (DataPair #slice true), (DataPair #sliceFrom 20.0), (DataPair #sliceTo 10.0), (DataPair #realWorldMapSize false))
		validateObjParams $sphere2.baseobject rescaledParams2 message:"validating rescaledParams2"
		
		-- test pb2 parameter aliasing
		assert_true (hasproperty $sphere1.baseobject #sliceon)
		assert_true (isproperty $sphere1.baseobject #sliceon)
		assert_false (isPropertyAnimatable $sphere1.baseobject #sliceon)
		assert_equal $sphere1.baseobject.sliceon $sphere1.baseobject.slice
		$sphere1.baseobject.sliceon = not $sphere1.baseobject.sliceon
		assert_equal $sphere1.baseobject.sliceon $sphere1.baseobject.slice
		$sphere1.baseobject.slice = not $sphere1.baseobject.slice
		assert_equal $sphere1.baseobject.sliceon $sphere1.baseobject.slice

		local ss = stringstream ""
		showclass "sphere.slice" to:ss
		seek ss 0
		skipToNextLine  ss
		skipToString  ss "/"
		local s = readDelimitedString  ss ")" as name	
		assert_equal s #sliceon
	),
	
	-- test of the teapot pb1 to pb2 conversion
	fn test_teapot_conversion =
	(
		format "Validating teapot\n"
		-- check to make sure class is recognized as pb2 based
		assert_true teapot.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance teapot
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_Teapot = #((DataPair #radius 25.0), (DataPair #segments 4), (DataPair #smooth true), (DataPair #body true), (DataPair #handle true), (DataPair #spout true), (DataPair #lid true))
		local oldParams_Teapot = #((DataPair #smooth true), (DataPair #radius 25.0), (DataPair #segs 4), (DataPair #mapcoords false), (DataPair #body true), (DataPair #handle true), (DataPair #spout true), (DataPair #lid true), (DataPair #realWorldMapSize false))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims teapot oldSubAnims_teapot message:"validating oldSubAnims_teapot"
		validateClassObjParams teapot oldParams_teapot message:"validating oldParams_teapot"
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_Teapot = #(#typeinCreationMethod, #typeInPos, #typeInRadius)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist teapot newParams_teapot message:"validating newParams_teapot"
		
		-- all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		local teapotClassParams1 = #((DataPair #typeinCreationMethod 1), (DataPair #typeInPos [0,0,0]), (DataPair #typeInRadius 0.0))
		local teapotClassParams2 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [1,2,3]), (DataPair #typeInRadius 4.0))
		local b0a= teapot name:"teapot0a"
		local b0b= teapot name:"teapot0b"
		setObjParams b0a.baseobject teapotClassParams1
		validateObjParams b0a.baseobject teapotClassParams1 message:"validating b0a teapotClassParams1"
		validateObjParams b0b.baseobject teapotClassParams1 message:"validating b0b teapotClassParams1"
		setObjParams b0a.baseobject teapotClassParams2
		validateObjParams b0a.baseobject teapotClassParams2 message:"validating b0a teapotClassParams2"
		validateObjParams b0b.baseobject teapotClassParams2 message:"validating b0b teapotClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #radius 25.0), (DataPair #segs 4), (DataPair #smooth true), (DataPair #body true), (DataPair #handle true), (DataPair #spout true), (DataPair #lid true), (DataPair #mapcoords false), (DataPair #realWorldMapSize false))
		local createParams2 = #((DataPair #radius 50.0), (DataPair #segs 8), (DataPair #smooth false), (DataPair #body true), (DataPair #handle false), (DataPair #spout true), (DataPair #lid false), (DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		local createParams3 = #((DataPair #radius 10.0), (DataPair #segs 16), (DataPair #smooth false), (DataPair #body false), (DataPair #handle true), (DataPair #spout false), (DataPair #lid false), (DataPair #mapcoords false), (DataPair #realWorldMapSize true))
		
		local b1 = teapot name:"teapot1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 530 1024 0 [26798.6,26500,38060.3] [0,0,0] message:"validating createParams1 mesh"

		local b2 = teapot name:"teapot2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"
		m = snapshotasmesh b2
		validateMesh m 1297 2560 1620 [-46141.7,64850,108942] [1458,1620+0.00488281,0] message:"validating createParams2 mesh"

		local b3 = teapot name:"teapot3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		m = snapshotasmesh b3
		validateMesh m 1056 2048 0 [39803.7,-52799.9,61514.3] [0,0,0] message:"validating createParams3 mesh"
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/teapot_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/teapot_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $teapot1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $teapot2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $teapot3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()
		
		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/teapot_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/teapot_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $teapot1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $teapot2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $teapot3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()

		-- test rescaleWorldUnits
		select $teapot2
		rescaleWorldUnits 2 #selOnly
		local rescaledParams2 = #((DataPair #radius 100.0), (DataPair #segs 8), (DataPair #smooth false), (DataPair #body true), (DataPair #handle false), (DataPair #spout true), (DataPair #lid false), (DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		validateObjParams $teapot2.baseobject rescaledParams2 message:"validating rescaledParams2"
		
	),
	
	-- test of the torus pb1 to pb2 conversion
	fn test_torus_conversion =
	(
		format "Validating torus\n"
		-- check to make sure class is recognized as pb2 based
		assert_true torus.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance torus
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_Torus = #((DataPair #Radius_1 25.0), (DataPair #Radius_2 10.0), (DataPair #rotation 0.0), (DataPair #Twist 0.0), (DataPair #segments 24), (DataPair #sides 12), (DataPair #smooth 0), (DataPair #Slice_On 0), (DataPair #Slice_To 0.0), (DataPair #Slice_From 0.0))
		local oldParams_Torus = #((DataPair #smooth 0), (DataPair #segs 24), (DataPair #sides 12), (DataPair #mapcoords false), (DataPair #slice false), (DataPair #radius1 25.0), (DataPair #radius2 10.0), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 0.0), (DataPair #tubeRotation 0.0), (DataPair #tubeTwist 0.0), (DataPair #realWorldMapSize false))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		-- this is a tweak since we renamed the rotation and Twist subanims intentionally
		oldSubAnims_Torus[3] = (DataPair #Tube_Rotation 0.0)
		oldSubAnims_Torus[4] = (DataPair #Tube_Twist 0.0)
		validateClassObjSubAnims torus oldSubAnims_torus message:"validating oldSubAnims_torus"
		validateClassObjParams torus oldParams_torus message:"validating oldParams_torus"
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_Torus = #(#sliceon, #typeinCreationMethod, #typeInPos, #typeInRadius1, #typeInRadius2)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist torus newParams_torus message:"validating newParams_torus"
		
		-- all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		-- #sliceOn parameter is tested in test pb2 parameter aliasing
		local torusClassParams1 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [0,0,0]), (DataPair #typeInRadius1 0.0), (DataPair #typeInRadius2 0.0))
		local torusClassParams2 = #((DataPair #typeinCreationMethod 1), (DataPair #typeInPos [1,2,3]), (DataPair #typeInRadius1 4.0), (DataPair #typeInRadius2 8.0))
		local b0a= torus name:"torus0a"
		local b0b= torus name:"torus0b"
		setObjParams b0a.baseobject torusClassParams1
		validateObjParams b0a.baseobject torusClassParams1 message:"validating b0a torusClassParams1"
		validateObjParams b0b.baseobject torusClassParams1 message:"validating b0b torusClassParams1"
		setObjParams b0a.baseobject torusClassParams2
		validateObjParams b0a.baseobject torusClassParams2 message:"validating b0a torusClassParams2"
		validateObjParams b0b.baseobject torusClassParams2 message:"validating b0b torusClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #radius1 25.0), (DataPair #radius2 10.0), (DataPair #tubeRotation 0.0), (DataPair #tubeTwist 0.0), (DataPair #segs 24), (DataPair #sides 12), (DataPair #smooth 0), (DataPair #slice false), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 0.0), (DataPair #mapcoords false), (DataPair #realWorldMapSize false))
		local createParams2 = #((DataPair #radius1 35.0), (DataPair #radius2 20.0), (DataPair #tubeRotation 45.0), (DataPair #tubeTwist 30.0), (DataPair #segs 32), (DataPair #sides 24), (DataPair #smooth 1), (DataPair #slice true), (DataPair #sliceFrom 30.0), (DataPair #sliceTo 50.0), (DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		local createParams3 = #((DataPair #radius1 40.0), (DataPair #radius2 5.0), (DataPair #tubeRotation 90.0), (DataPair #tubeTwist 60.0), (DataPair #segs 36), (DataPair #sides 6), (DataPair #smooth 2), (DataPair #slice true), (DataPair #sliceFrom 90.0), (DataPair #sliceTo 60.0), (DataPair #mapcoords false), (DataPair #realWorldMapSize true))
		
		local b1 = torus name:"torus1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 288 576 0 [14400,14400,14400] [0,0,0] message:"validating createParams1 mesh"

		local b2 = torus name:"torus2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"
		m = snapshotasmesh b2
		validateMesh m 794 1584 827 [-39267.7,39184.9,39700] [414,401.5,0] message:"validating createParams2 mesh"

		local b3 = torus name:"torus3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		m = snapshotasmesh b3
		validateMesh m 224 444 0 [2650.99,-8909.28,11200] [0,0,0] message:"validating createParams3 mesh"
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/torus_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/torus_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $torus1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $torus2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $torus3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()
		
		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/torus_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/torus_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $torus1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $torus2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $torus3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()

		-- test rescaleWorldUnits
		select $torus2
		rescaleWorldUnits 2 #selOnly
		local rescaledParams2 = #((DataPair #radius1 70.0), (DataPair #radius2 40.0), (DataPair #tubeRotation 45.0), (DataPair #tubeTwist 30.0), (DataPair #segs 32), (DataPair #sides 24), (DataPair #smooth 1), (DataPair #slice true), (DataPair #sliceFrom 30.0), (DataPair #sliceTo 50.0), (DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		validateObjParams $torus2.baseobject rescaledParams2 message:"validating rescaledParams2"
		
		-- test pb2 parameter aliasing
		assert_true (hasproperty $torus1.baseobject #sliceon)
		assert_true (isproperty $torus1.baseobject #sliceon)
		assert_true (isPropertyAnimatable $torus1.baseobject #sliceon)
		assert_equal $torus1.baseobject.sliceon $torus1.baseobject.slice
		$torus1.baseobject.sliceon = not $torus1.baseobject.sliceon
		assert_equal $torus1.baseobject.sliceon $torus1.baseobject.slice
		$torus1.baseobject.slice = not $torus1.baseobject.slice
		assert_equal $torus1.baseobject.sliceon $torus1.baseobject.slice

		local ss = stringstream ""
		showclass "torus.slice" to:ss
		seek ss 0
		skipToNextLine  ss
		skipToString  ss "/"
		local s = readDelimitedString  ss ")" as name	
		assert_equal s #sliceon
	),

	-- test of the pyramid pb1 to pb2 conversion
	fn test_pyramid_conversion =
	(
		format "Validating pyramid\n"
		-- check to make sure class is recognized as pb2 based
		assert_true pyramid.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance pyramid
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_Pyramid = #((DataPair #width 25.0), (DataPair #depth 25.0), (DataPair #height 25.0), (DataPair #Width_Segments 1), (DataPair #Depth_Segments 1), (DataPair #Height_Segments 1))
		local oldParams_Pyramid = #((DataPair #height 25.0), (DataPair #width 25.0), (DataPair #widthsegs 1), (DataPair #mapcoords false), (DataPair #heightsegs 1), (DataPair #depth 25.0), (DataPair #depthSegs 1), (DataPair #realWorldMapSize false))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims pyramid oldSubAnims_pyramid message:"validating oldSubAnims_pyramid"
		validateClassObjParams pyramid oldParams_pyramid message:"validating oldParams_pyramid"
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_Pyramid = #(#typeinCreationMethod, #typeInPos, #typeInWidth, #typeInDepth, #typeInHeight)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist pyramid newParams_pyramid message:"validating newParams_pyramid"
		
		-- all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		local pyramidClassParams1 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [0,0,0]), (DataPair #typeInWidth 0.0), (DataPair #typeInDepth 0.0), (DataPair #typeInHeight 0.0))
		local pyramidClassParams2 = #((DataPair #typeinCreationMethod 1), (DataPair #typeInPos [1,2,3]), (DataPair #typeInWidth 4.0), (DataPair #typeInDepth 5.0), (DataPair #typeInHeight 6.0))
		local b0a= pyramid name:"pyramid0a"
		local b0b= pyramid name:"pyramid0b"
		setObjParams b0a.baseobject pyramidClassParams1
		validateObjParams b0a.baseobject pyramidClassParams1 message:"validating b0a pyramidClassParams1"
		validateObjParams b0b.baseobject pyramidClassParams1 message:"validating b0b pyramidClassParams1"
		setObjParams b0a.baseobject pyramidClassParams2
		validateObjParams b0a.baseobject pyramidClassParams2 message:"validating b0a pyramidClassParams2"
		validateObjParams b0b.baseobject pyramidClassParams2 message:"validating b0b pyramidClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #width 25.0), (DataPair #depth 25.0), (DataPair #height 25.0), (DataPair #widthsegs 1), (DataPair #depthSegs 1), (DataPair #heightsegs 1), (DataPair #mapcoords false), (DataPair #realWorldMapSize false))
		local createParams2 = #((DataPair #width 30.0), (DataPair #depth 10.0), (DataPair #height 50.0), (DataPair #widthsegs 2), (DataPair #depthSegs 4), (DataPair #heightsegs 6), (DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		local createParams3 = #((DataPair #width 45.0), (DataPair #depth 35.0), (DataPair #height 15.0), (DataPair #widthsegs 3), (DataPair #depthSegs 5), (DataPair #heightsegs 7), (DataPair #mapcoords false), (DataPair #realWorldMapSize true))
		
		local b1 = pyramid name:"pyramid1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 6 8 0 [300,300,325] [0,0,0] message:"validating createParams1 mesh"

		local b2 = pyramid name:"pyramid2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"
		m = snapshotasmesh b2
		validateMesh m 74 144 63 [-3700,3700,5250] [1.5,28.5,0] message:"validating createParams2 mesh"

		local b3 = pyramid name:"pyramid3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		m = snapshotasmesh b3
		validateMesh m 114 224 0 [5700,-5700,6435] [0,0,0] message:"validating createParams3 mesh"
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/pyramid_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/pyramid_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $pyramid1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $pyramid2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $pyramid3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()
		
		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/pyramid_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/pyramid_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $pyramid1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $pyramid2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $pyramid3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()

		-- test rescaleWorldUnits
		select $pyramid2
		rescaleWorldUnits 2 #selOnly
		local rescaledParams2 = #((DataPair #width 60.0), (DataPair #depth 20.0), (DataPair #height 100.0), (DataPair #widthsegs 2), (DataPair #depthSegs 4), (DataPair #heightsegs 6), (DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		validateObjParams $pyramid2.baseobject rescaledParams2 message:"validating rescaledParams2"
		
	),
	
	-- test of the prism pb1 to pb2 conversion
	fn test_prism_conversion =
	(
		format "Validating prism\n"
		-- check to make sure class is recognized as pb2 based
		assert_true prism.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance prism
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_Prism = #((DataPair #Side_1_Length 25.0), (DataPair #Side_2_Length 25.0), (DataPair #Side_3_Length 25.0), (DataPair #height 10.0), (DataPair #Side_1_Segments 1), (DataPair #Side_2_Segments 1), (DataPair #Side_3_Segments 1), (DataPair #Height_Segments 1))
		local oldParams_Prism = #((DataPair #height 10.0), (DataPair #mapcoords false), (DataPair #heightsegs 1), (DataPair #side1Length 25.0), (DataPair #side2Length 25.0), (DataPair #side3Length 25.0), (DataPair #side1Segs 1), (DataPair #side2Segs 1), (DataPair #side3Segs 1))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims prism oldSubAnims_prism message:"validating oldSubAnims_prism"
		validateClassObjParams prism oldParams_prism message:"validating oldParams_prism"
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_Prism = #(#typeinCreationMethod, #typeInPos, #typeInSide1Length, #typeInSide2Length, #typeInSide3Length, #typeInHeight)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist prism newParams_prism message:"validating newParams_prism"
		
		-- all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		local prismClassParams1 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [0,0,0]), (DataPair #typeInSide1Length 0.0), (DataPair #typeInSide2Length 0.0), (DataPair #typeInSide3Length 0.0),(DataPair #typeInHeight 0.0))
		local prismClassParams2 = #((DataPair #typeinCreationMethod 1), (DataPair #typeInPos [1,2,3]), (DataPair #typeInSide1Length 4.0), (DataPair #typeInSide2Length 5.0), (DataPair #typeInSide3Length 6.0), (DataPair #typeInHeight 7.0))
		local b0a= prism name:"prism0a2"
		local b0b= prism name:"prism0b"
		setObjParams b0a.baseobject prismClassParams1
		validateObjParams b0a.baseobject prismClassParams1 message:"validating b0a prismClassParams1"
		validateObjParams b0b.baseobject prismClassParams1 message:"validating b0b prismClassParams1"
		setObjParams b0a.baseobject prismClassParams2
		validateObjParams b0a.baseobject prismClassParams2 message:"validating b0a prismClassParams2"
		validateObjParams b0b.baseobject prismClassParams2 message:"validating b0b prismClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #side1Length 25.0), (DataPair #side2Length 25.0), (DataPair #side3Length 25.0), (DataPair #height 10.0), (DataPair #side1Segs 1), (DataPair #side2Segs 1), (DataPair #side3Segs 1), (DataPair #heightsegs 1), (DataPair #mapcoords false))
		local createParams2 = #((DataPair #side1Length 20.0), (DataPair #side2Length 35.0), (DataPair #side3Length 30.0), (DataPair #height 15.0), (DataPair #side1Segs 2), (DataPair #side2Segs 4), (DataPair #side3Segs 6), (DataPair #heightsegs 8), (DataPair #mapcoords true))
		local createParams3 = #((DataPair #side1Length 30.0), (DataPair #side2Length 45.0), (DataPair #side3Length 35.0), (DataPair #height 20.0), (DataPair #side1Segs 3), (DataPair #side2Segs 5), (DataPair #side3Segs 7), (DataPair #heightsegs 9), (DataPair #mapcoords false))
		
		local b1 = prism name:"prism1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 8 12 0 [500,457.735,440] [0,0,0] message:"validating createParams1 mesh"

		local b2 = prism name:"prism2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"
		m = snapshotasmesh b2
		validateMesh m 110 216 143 [-4861.04,6867.32,6325] [85.9265,71.5,0] message:"validating createParams2 mesh"

		local b3 = prism name:"prism3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		m = snapshotasmesh b3
		validateMesh m 152 300 0 [8921.11,-5479.08,9120] [0,0,0] message:"validating createParams3 mesh"
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/prism_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/prism_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $prism1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $prism2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $prism3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()
		
		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/prism_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/prism_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $prism1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $prism2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $prism3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()

		-- test rescaleWorldUnits
		select $prism2
		rescaleWorldUnits 2 #selOnly
		local rescaledParams2 = #((DataPair #side1Length 40.0), (DataPair #side2Length 70.0), (DataPair #side3Length 60.0), (DataPair #height 30.0), (DataPair #side1Segs 2), (DataPair #side2Segs 4), (DataPair #side3Segs 6), (DataPair #heightsegs 8), (DataPair #mapcoords true))
		validateObjParams $prism2.baseobject rescaledParams2 message:"validating rescaledParams2"
		
	),
	
	-- test of the tube pb1 to pb2 conversion
	fn test_tube_conversion =
	(
		format "Validating tube\n"
		-- check to make sure class is recognized as pb2 based
		assert_true tube.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance tube
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_Tube = #((DataPair #Radius_1 25.0), (DataPair #Radius_2 20.0), (DataPair #height 50.0), (DataPair #sides 24), (DataPair #Cap_Segments 1), (DataPair #Height_Segments 1), (DataPair #smooth true), (DataPair #Slice_On 0), (DataPair #Slice_From 0.0), (DataPair #Slice_To 0.0))
		local oldParams_Tube = #((DataPair #height 50.0), (DataPair #smooth true), (DataPair #sides 24), (DataPair #mapcoords false), (DataPair #slice false), (DataPair #radius1 25.0), (DataPair #radius2 20.0), (DataPair #capsegs 1), (DataPair #heightsegs 1), (DataPair #sliceFrom 0.0), (DataPair #sliceTo 0.0), (DataPair #realWorldMapSize false))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims tube oldSubAnims_tube message:"validating oldSubAnims_tube"
		validateClassObjParams tube oldParams_tube message:"validating oldParams_tube"
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_Tube = #(#sliceon, #typeinCreationMethod, #typeInPos, #typeInRadius1, #typeInRadius2, #typeInHeight)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist tube newParams_tube message:"validating newParams_tube"
		
		-- all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		-- #sliceOn parameter is tested in test pb2 parameter aliasing
		local tubeClassParams1 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [0,0,0]), (DataPair #typeInRadius1 0.0), (DataPair #typeInRadius2 0.0), (DataPair #typeInHeight 0.0))
		local tubeClassParams2 = #((DataPair #typeinCreationMethod 1), (DataPair #typeInPos [1,2,3]), (DataPair #typeInRadius1 4.0), (DataPair #typeInRadius2 8.0), (DataPair #typeInHeight 9.0))
		local b0a= tube name:"tube0a"
		local b0b= tube name:"tube0b"
		setObjParams b0a.baseobject tubeClassParams1
		validateObjParams b0a.baseobject tubeClassParams1 message:"validating b0a tubeClassParams1"
		validateObjParams b0b.baseobject tubeClassParams1 message:"validating b0b tubeClassParams1"
		setObjParams b0a.baseobject tubeClassParams2
		validateObjParams b0a.baseobject tubeClassParams2 message:"validating b0a tubeClassParams2"
		validateObjParams b0b.baseobject tubeClassParams2 message:"validating b0b tubeClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #radius1 25.0), (DataPair #radius2 20.0), (DataPair #height 50.0), (DataPair #sides 18), (DataPair #capsegs 1), (DataPair #heightsegs 5), (DataPair #smooth true), (DataPair #slice false), (DataPair #slicefrom 0.0), (DataPair #sliceto 0.0), (DataPair #mapcoords false), (DataPair #realWorldMapSize false))
		local createParams2 = #((DataPair #radius1 15.0), (DataPair #radius2 25.0), (DataPair #height 75.0), (DataPair #sides 24), (DataPair #capsegs 4), (DataPair #heightsegs 10), (DataPair #smooth false), (DataPair #slice true), (DataPair #slicefrom 45.0), (DataPair #sliceto 90.0), (DataPair #mapcoords false), (DataPair #realWorldMapSize false))
		local createParams3 = #((DataPair #radius1 20.0), (DataPair #radius2 30.0), (DataPair #height 80.0), (DataPair #sides 32), (DataPair #capsegs 8), (DataPair #heightsegs 15), (DataPair #smooth true), (DataPair #slice true), (DataPair #slicefrom 60.0), (DataPair #sliceto 30.0), (DataPair #mapcoords false), (DataPair #realWorldMapSize true))
		
		local b1 = tube name:"tube1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 216 432 0 [10800,10800,16200] [0,0,0] message:"validating createParams1 mesh"

		local b2 = tube name:"tube2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"
		m = snapshotasmesh b2
		validateMesh m 702 1400 0 [-33891.1,34599.3,61425] [0,0,0] message:"validating createParams2 mesh"

		local b3 = tube name:"tube3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		m = snapshotasmesh b3
		validateMesh m 1520 3036 0 [49455.6,-49455.6,136800] [0,0,0] message:"validating createParams3 mesh"
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/tube_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/tube_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $tube1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $tube2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $tube3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()
		
		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/tube_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/tube_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $tube1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $tube2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $tube3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()

		-- test rescaleWorldUnits
		select $tube2
		rescaleWorldUnits 2 #selOnly
		local rescaledParams2 = #((DataPair #radius1 30.0), (DataPair #radius2 50.0), (DataPair #height 150.0), (DataPair #sides 24), (DataPair #capsegs 4), (DataPair #heightsegs 10), (DataPair #smooth false), (DataPair #slice true), (DataPair #slicefrom 45.0), (DataPair #sliceto 90.0), (DataPair #mapcoords false), (DataPair #realWorldMapSize false))
		validateObjParams $tube2.baseobject rescaledParams2 message:"validating rescaledParams2"
		
		-- test pb2 parameter aliasing
		assert_true (hasproperty $tube1.baseobject #sliceon)
		assert_true (isproperty $tube1.baseobject #sliceon)
		assert_true (isPropertyAnimatable $tube1.baseobject #sliceon)
		assert_equal $tube1.baseobject.sliceon $tube1.baseobject.slice
		$tube1.baseobject.sliceon = not $tube1.baseobject.sliceon
		assert_equal $tube1.baseobject.sliceon $tube1.baseobject.slice
		$tube1.baseobject.slice = not $tube1.baseobject.slice
		assert_equal $tube1.baseobject.sliceon $tube1.baseobject.slice

		local ss = stringstream ""
		showclass "tube.slice" to:ss
		seek ss 0
		skipToNextLine  ss
		skipToString  ss "/"
		local s = readDelimitedString  ss ")" as name	
		assert_equal s #sliceon
	),
	
		
	-- test of the chamferbox pb1 to pb2 conversion
	fn test_chamferbox_conversion =
	(
		format "Validating chamferbox\n"
		-- check to make sure class is recognized as pb2 based
		assert_true chamferbox.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance chamferbox
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_ChamferBox = #((DataPair #length 0.1), (DataPair #width 0.1), (DataPair #height 0.1), (DataPair #Fillet 0.01), (DataPair #Length_Segments 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1), (DataPair #Fillet_Segments 3))
		local oldParams_ChamferBox = #((DataPair #height 0.1), (DataPair #length 0.1), (DataPair #width 0.1), (DataPair #smooth 1), (DataPair #mapcoords 1), (DataPair #Fillet 0.01), (DataPair #Length_Segments 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1), (DataPair #Fillet_Segments 3), (DataPair #realWorldMapSize false))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims chamferbox oldSubAnims_chamferbox message:"validating oldSubAnims_chamferbox"
		validateClassObjParams chamferbox oldParams_chamferbox message:"validating oldParams_chamferbox"
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_ChamferBox = #(#typeinCreationMethod, #typeInPos, #typeInLength, #typeInWidth, #typeInHeight, #typeInFillet)	-- validate that these properties exist on an instance of the class
		validateNewParamsExist chamferbox newParams_chamferbox message:"validating newParams_chamferbox"
		
		-- all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		local chamferboxClassParams1 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [0,0,0]), (DataPair #typeInLength 0.0), (DataPair #typeInWidth 0.0), (DataPair #typeInHeight 0.0),(DataPair #typeInFillet 0.0))
		local chamferboxClassParams2 = #((DataPair #typeinCreationMethod 1), (DataPair #typeInPos [1,2,3]), (DataPair #typeInLength 10.0), (DataPair #typeInWidth 20.0), (DataPair #typeInHeight 30.0),(DataPair #typeInFillet 5.0))
		local b0a= chamferbox name:"chamferbox0a2"
		local b0b= chamferbox name:"chamferbox0b"
		setObjParams b0a.baseobject chamferboxClassParams1
		validateObjParams b0a.baseobject chamferboxClassParams1 message:"validating b0a chamferboxClassParams1"
		validateObjParams b0b.baseobject chamferboxClassParams1 message:"validating b0b chamferboxClassParams1"
		setObjParams b0a.baseobject chamferboxClassParams2
		validateObjParams b0a.baseobject chamferboxClassParams2 message:"validating b0a chamferboxClassParams2"
		validateObjParams b0b.baseobject chamferboxClassParams2 message:"validating b0b chamferboxClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #length 0.1), (DataPair #width 0.1), (DataPair #height 0.1), (DataPair #Fillet 0.01), (DataPair #Length_Segments 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1), (DataPair #Fillet_Segments 3), (DataPair #mapcoords true), (DataPair #smooth true), (DataPair #realWorldMapSize false))
		local createParams2 = #((DataPair #length 10.0), (DataPair #width 25.0), (DataPair #height 30.0), (DataPair #Fillet 5.0), (DataPair #Length_Segments 2), (DataPair #Width_Segments 4), (DataPair #Height_Segments 6), (DataPair #Fillet_Segments 8), (DataPair #mapcoords false), (DataPair #smooth false), (DataPair #realWorldMapSize false))
		local createParams3 = #((DataPair #length 20.0), (DataPair #width 40.0), (DataPair #height 15.0), (DataPair #Fillet 10.0), (DataPair #Length_Segments 3), (DataPair #Width_Segments 5), (DataPair #Height_Segments 7), (DataPair #Fillet_Segments 9), (DataPair #mapcoords true), (DataPair #smooth false), (DataPair #realWorldMapSize true))
		
		local b1 = chamferbox name:"chamferbox1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 104 204 138 [5200,5200,5205.2] [65.4515,69,0] message:"validating createParams1 mesh"

		local b2 = chamferbox name:"chamferbox2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"
		m = snapshotasmesh b2
		validateMesh m 954 1904 0 [-47700,47700,62009.9] [0,0,0] message:"validating createParams2 mesh"

		local b3 = chamferbox name:"chamferbox3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		m = snapshotasmesh b3
		validateMesh m 1296 2588 1408 [64800,-64800,74520.3] [39318.8,9842.15,0] message:"validating createParams3 mesh"
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/chamferbox_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/chamferbox_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $chamferbox1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $chamferbox2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $chamferbox3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()
		
		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/chamferbox_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/chamferbox_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $chamferbox1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $chamferbox2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $chamferbox3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()

		-- test rescaleWorldUnits
		select $chamferbox2
		rescaleWorldUnits 2 #selOnly
		local rescaledParams2 = #((DataPair #length 20.0), (DataPair #width 50.0), (DataPair #height 60.0), (DataPair #Fillet 10.0), (DataPair #Length_Segments 2), (DataPair #Width_Segments 4), (DataPair #Height_Segments 6), (DataPair #Fillet_Segments 8), (DataPair #mapcoords false), (DataPair #smooth false), (DataPair #realWorldMapSize false))
		validateObjParams $chamferbox2.baseobject rescaledParams2 message:"validating rescaledParams2"
		
	),
	
	-- test of the chamfercyl pb1 to pb2 conversion
	fn test_chamfercyl_conversion =
	(
		format "Validating chamfercyl\n"
		-- check to make sure class is recognized as pb2 based
		assert_true chamfercyl.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance chamfercyl
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_ChamferCyl = #((DataPair #radius 0.0), (DataPair #height 0.0), (DataPair #Fillet 0.0), (DataPair #Height_Segments 1), (DataPair #Fillet_Segments 1), (DataPair #sides 12), (DataPair #Cap_Segments 1), (DataPair #Smooth_On 1), (DataPair #Slice_On 0), (DataPair #Slice_From 0.0), (DataPair #Slice_To 0.0))
		local oldParams_ChamferCyl = #((DataPair #height 0.0), (DataPair #radius 0.0), (DataPair #sides 12), (DataPair #mapcoords 1), (DataPair #Fillet 0.0), (DataPair #Height_Segments 1), (DataPair #Fillet_Segments 1), (DataPair #Cap_Segments 1), (DataPair #Smooth_On 1), (DataPair #Slice_On 0), (DataPair #Slice_From 0.0), (DataPair #Slice_To 0.0), (DataPair #realWorldMapSize false))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims chamfercyl oldSubAnims_chamfercyl message:"validating oldSubAnims_chamfercyl"
		validateClassObjParams chamfercyl oldParams_chamfercyl message:"validating oldParams_chamfercyl"
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_ChamferCyl = #(#typeinCreationMethod, #typeInPos, #typeInRadius, #typeInHeight, #typeInFillet)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist chamfercyl newParams_chamfercyl message:"validating newParams_chamfercyl"
		
		-- all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		-- #sliceOn parameter is tested in test pb2 parameter aliasing
		local chamfercylClassParams1 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [0,0,0]), (DataPair #typeInRadius 0.0), (DataPair #typeInHeight 0.0), (DataPair #typeInFillet 0.0))
		local chamfercylClassParams2 = #((DataPair #typeinCreationMethod 1), (DataPair #typeInPos [1,2,3]), (DataPair #typeInRadius 4.0), (DataPair #typeInHeight 8.0), (DataPair #typeInFillet 2.0))
		local b0a= chamfercyl name:"chamfercyl0a"
		local b0b= chamfercyl name:"chamfercyl0b"
		setObjParams b0a.baseobject chamfercylClassParams1
		validateObjParams b0a.baseobject chamfercylClassParams1 message:"validating b0a chamfercylClassParams1"
		validateObjParams b0b.baseobject chamfercylClassParams1 message:"validating b0b chamfercylClassParams1"
		setObjParams b0a.baseobject chamfercylClassParams2
		validateObjParams b0a.baseobject chamfercylClassParams2 message:"validating b0a chamfercylClassParams2"
		validateObjParams b0b.baseobject chamfercylClassParams2 message:"validating b0b chamfercylClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #radius 0.0), (DataPair #height 0.0), (DataPair #Fillet 0.0), (DataPair #Height_Segments 1), (DataPair #Fillet_Segments 1), (DataPair #sides 12), (DataPair #Cap_Segments 1), (DataPair #Smooth_On true), (DataPair #Slice_On false), (DataPair #Slice_From 0.0), (DataPair #Slice_To 0.0), (DataPair #mapcoords false), (DataPair #realWorldMapSize false))
		local createParams2 = #((DataPair #radius 40.0), (DataPair #height 35.0), (DataPair #Fillet 10.0), (DataPair #Height_Segments 3), (DataPair #Fillet_Segments 2), (DataPair #sides 24), (DataPair #Cap_Segments 8), (DataPair #Smooth_On false), (DataPair #Slice_On true), (DataPair #Slice_From 45.0), (DataPair #Slice_To 30.0), (DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		local createParams3 = #((DataPair #radius 25.0), (DataPair #height 50.0), (DataPair #Fillet 20.0), (DataPair #Height_Segments 5), (DataPair #Fillet_Segments 4), (DataPair #sides 36), (DataPair #Cap_Segments 16), (DataPair #Smooth_On false), (DataPair #Slice_On true), (DataPair #Slice_From 60.0), (DataPair #Slice_To 90.0), (DataPair #mapcoords false), (DataPair #realWorldMapSize true))
		
		local b1 = chamfercyl name:"chamfercyl1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 50 96 0 [2500,2500,2500] [0,0,0] message:"validating createParams1 mesh"

		local b2 = chamfercyl name:"chamfercyl2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"
		m = snapshotasmesh b2
		validateMesh m 556 1108 652 [-17831.8,35448.8,37530] [383.12,409.105,0] message:"validating createParams2 mesh"

		local b3 = chamfercyl name:"chamfercyl3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		m = snapshotasmesh b3
		validateMesh m 1636 3268 0 [81597.6,-82555.2,122700] [0,0,0] message:"validating createParams3 mesh"
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/chamfercyl_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/chamfercyl_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $chamfercyl1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $chamfercyl2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $chamfercyl3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()
		
		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/chamfercyl_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/chamfercyl_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $chamfercyl1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $chamfercyl2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $chamfercyl3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()

		-- test rescaleWorldUnits
		select $chamfercyl2
		rescaleWorldUnits 2 #selOnly
		local rescaledParams2 = #((DataPair #radius 80.0), (DataPair #height 70.0), (DataPair #Fillet 20.0), (DataPair #Height_Segments 3), (DataPair #Fillet_Segments 2), (DataPair #sides 24), (DataPair #Cap_Segments 8), (DataPair #Smooth_On false), (DataPair #Slice_On true), (DataPair #Slice_From 45.0), (DataPair #Slice_To 30.0), (DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		validateObjParams $chamfercyl2.baseobject rescaledParams2 message:"validating rescaledParams2"
	),
	
	-- test of the l_ext pb1 to pb2 conversion
	fn test_l_ext_conversion =
	(
		format "Validating l_ext\n"
		-- check to make sure class is recognized as pb2 based
		assert_true l_ext.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance l_ext
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_L_Ext = #((DataPair #Side_Length 0.0), (DataPair #Front_Length 0.0), (DataPair #Side_Width 0.0), (DataPair #Front_Width 0.0), (DataPair #height 0.0), (DataPair #Side_Segments 1), (DataPair #Front_Segments 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1))
		local oldParams_L_Ext = #((DataPair #height 0.0), (DataPair #mapcoords 1), (DataPair #Side_Length 0.0), (DataPair #Front_Length 0.0), (DataPair #Side_Width 0.0), (DataPair #Front_Width 0.0), (DataPair #Side_Segments 1), (DataPair #Front_Segments 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1), (DataPair #realWorldMapSize false))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims l_ext oldSubAnims_l_ext message:"validating oldSubAnims_l_ext"
		validateClassObjParams l_ext oldParams_l_ext message:"validating oldParams_l_ext"
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_L_Ext = #(#typeinCreationMethod, #typeInPos, #typeInSideLength, #typeInFrontLength, #typeInSideWidth, #typeInFrontWidth, #typeInHeight, #centerCreate)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist l_ext newParams_l_ext message:"validating newParams_l_ext"
		
		-- except for #centerCreate, all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		-- #centerCreate parameter is tested in createParams4 and in its own little block below
		local l_extClassParams1 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [0,0,0]), (DataPair #typeInSideLength 0.0), (DataPair #typeInFrontLength 0.0), (DataPair #typeInSideWidth 0.0), (DataPair #typeInFrontWidth 0.0), (DataPair #typeInHeight 0.0))
		local l_extClassParams2 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [1,2,3]), (DataPair #typeInSideLength 7.0), (DataPair #typeInFrontLength 8.0), (DataPair #typeInSideWidth 6.0), (DataPair #typeInFrontWidth 4.0), (DataPair #typeInHeight 8.0))
		local b0a= l_ext name:"l_ext0a"
		local b0b= l_ext name:"l_ext0b"
		setObjParams b0a.baseobject l_extClassParams1
		validateObjParams b0a.baseobject l_extClassParams1 message:"validating b0a l_extClassParams1"
		validateObjParams b0b.baseobject l_extClassParams1 message:"validating b0b l_extClassParams1"
		setObjParams b0a.baseobject l_extClassParams2
		validateObjParams b0a.baseobject l_extClassParams2 message:"validating b0a l_extClassParams2"
		validateObjParams b0b.baseobject l_extClassParams2 message:"validating b0b l_extClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #Side_Length 0.0), (DataPair #Front_Length 0.0), (DataPair #Side_Width 0.0), (DataPair #Front_Width 0.0), (DataPair #height 0.0), (DataPair #Side_Segments 1), (DataPair #Front_Segments 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1), (DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		local createParams2 = #((DataPair #Side_Length 20.0), (DataPair #Front_Length 25.0), (DataPair #Side_Width 10.0), (DataPair #Front_Width 5.0), (DataPair #height 20.0), (DataPair #Side_Segments 4), (DataPair #Front_Segments 16), (DataPair #Width_Segments 20), (DataPair #Height_Segments 10), (DataPair #mapcoords false), (DataPair #realWorldMapSize false))
		local createParams3 = #((DataPair #Side_Length 40.0), (DataPair #Front_Length 30.0), (DataPair #Side_Width 20.0), (DataPair #Front_Width 15.0), (DataPair #height 5.0), (DataPair #Side_Segments 8), (DataPair #Front_Segments 24), (DataPair #Width_Segments 64), (DataPair #Height_Segments 20), (DataPair #mapcoords false), (DataPair #realWorldMapSize true))
		-- test added param centerCreate - only comes into play when a length or height is negative
		local createParams4 = #((DataPair #Side_Length -40.0), (DataPair #Front_Length 30.0), (DataPair #Side_Width 20.0), (DataPair #Front_Width 15.0), (DataPair #height 5.0), (DataPair #Side_Segments 8), (DataPair #Front_Segments 24), (DataPair #Width_Segments 64), (DataPair #Height_Segments 20), (DataPair #mapcoords false), (DataPair #realWorldMapSize true), (DataPair #centerCreate true) )
		
		local b1 = l_ext name:"l_ext1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		assert_false b1.centerCreate -- new param
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 24 20 26 [1199.2,1200.8,1200] [0,0,0] message:"validating createParams1 mesh"

		local b2 = l_ext name:"l_ext2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		validateObjParams b2.baseobject createParams2 message:"validating createParams2"
		assert_false b2.centerCreate -- new param
		m = snapshotasmesh b2
		validateMesh m 1762 3200 0 [-67920,98962.5,105720] [0,0,0] message:"validating createParams2 mesh"

		local b3 = l_ext name:"l_ext3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		assert_false b3.centerCreate -- new param
		m = snapshotasmesh b3
		validateMesh m 8322 15872 0 [513081,-285533,436905] [0,0,0] message:"validating createParams3 mesh"

		-- test centerCreate
		local b4 = l_ext name:"l_ext4" pos:[20,20,20]
		setObjParams b4.baseobject createParams4
		validateObjParams b4.baseobject createParams4 message:"validating createParams4"
		m = snapshotasmesh b4
		validateMesh m 8322 15872 0 [263420,368753,187245] [0,0,0] message:"validating createParams4 mesh - centerCreate = true"
		b4.centerCreate = false
		m = snapshotasmesh b4
		validateMesh m 8322 15872 0 [263420,35872.5,187245] [0,0,0] message:"validating createParams4 mesh - centerCreate = false"
		b4.centerCreate = true

		--Test PBAccessors value change
		local accessorsObj = l_ext Side_Width:50 Front_Width:60 Side_Length:100 Front_Length:150 height:50 pos:[0, 0, 0]
		local accessorsParams = #((DataPair #Side_Length 100.0), (DataPair #Front_Length 150.0), (DataPair #Side_Width 50.0), (DataPair #Front_Width 60.0), (DataPair #height 50.0), (DataPair #Side_Segments 1), (DataPair #Front_Segments 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1), (DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		validateObjParams accessorsObj.baseobject accessorsParams
		accessorsObj.Side_Length = 25 
		accessorsObj.Front_Length = 20
		local accessorsValidateParams = #((DataPair #Side_Length 25.0), (DataPair #Front_Length 20.0), (DataPair #Side_Width 20.0), (DataPair #Front_Width 25.0), (DataPair #height 50.0), (DataPair #Side_Segments 1), (DataPair #Front_Segments 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1), (DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		validateObjParams accessorsObj.baseobject accessorsValidateParams

		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/l_ext_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/l_ext_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $l_ext1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $l_ext2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $l_ext3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()

		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/l_ext_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/l_ext_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $l_ext1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $l_ext2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $l_ext3.baseobject createParams3 message:"validating stp post-load createParams3"
		validateObjParams $l_ext4.baseobject createParams4 message:"validating stp post-load createParams4"
		testScriptedController()

		-- test rescaleWorldUnits
		select $l_ext2
		rescaleWorldUnits 2 #selOnly
		local rescaledParams2 = #((DataPair #Side_Length 40.0), (DataPair #Front_Length 50.0), (DataPair #Side_Width 20.0), (DataPair #Front_Width 10.0), (DataPair #height 40.0), (DataPair #Side_Segments 4), (DataPair #Front_Segments 16), (DataPair #Width_Segments 20), (DataPair #Height_Segments 10), (DataPair #mapcoords false), (DataPair #realWorldMapSize false))
		validateObjParams $l_ext2.baseobject rescaledParams2 message:"validating rescaledParams2"
		
	),
	
	-- test of the c_ext pb1 to pb2 conversion
	fn test_c_ext_conversion =
	(
		format "Validating c_ext\n"
		-- check to make sure class is recognized as pb2 based
		assert_true c_ext.ispb2based
		
		-- test to make sure a class instance does not expose any properties that are also node level properties
		local testObj  = createinstance c_ext
		for p in nodePropNames do
			assert_false (isProperty testObj p) message:("testing node property: "+p)
		
		-- the following are the pb1 subAnim and property name/value pairs of the pb1 version of the class
		local oldSubAnims_C_Ext = #((DataPair #Back_Length 0.0), (DataPair #Side_Length 0.0), (DataPair #Front_Length 0.0), (DataPair #Back_Width 0.0), (DataPair #Side_Width 0.0), (DataPair #Front_Width 0.0), (DataPair #height 0.0), (DataPair #Back_Segments 1), (DataPair #Side_Segments 1), (DataPair #Front_Segments 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1))
		local oldParams_C_Ext = #((DataPair #height 0.0), (DataPair #mapcoords 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1), (DataPair #Side_Length 0.0), (DataPair #Front_Length 0.0), (DataPair #Side_Width 0.0), (DataPair #Front_Width 0.0), (DataPair #Side_Segments 1), (DataPair #Front_Segments 1), (DataPair #Back_Width 0.0), (DataPair #Back_Length 0.0), (DataPair #Back_Segments 1), (DataPair #realWorldMapSize false))
		-- test the pb2 version of the class to make sure it has at least the same subAnims and properties, and that their values are the same as the pb1 version.
		validateClassObjSubAnims c_ext oldSubAnims_c_ext message:"validating oldSubAnims_c_ext"
		validateClassObjParams c_ext oldParams_c_ext message:"validating oldParams_c_ext"
		
		-- the following are the new properties that are exposed on the pb2 version of the class
		local newParams_C_Ext = #(#typeinCreationMethod, #typeInPos, #typeInBackLength, #typeInSideLength, #typeInFrontLength, #typeInBackWidth, #typeInSideWidth, #typeInFrontWidth, #typeInHeight, #centerCreate)
		-- validate that these properties exist on an instance of the class
		validateNewParamsExist c_ext newParams_c_ext message:"validating newParams_c_ext"
		
		-- except for #centerCreate, all new properties that are exposed on the pb2 version of the class are class static. So changing them on one class instance will show as them changing on all class instances.
		-- create parameter lists to set on an instance, set those on an instance, and then test to make sure those property values are the same on all instances
		-- #centerCreate parameter is tested in createParams4 and in its own little block below
		local c_extClassParams1 = #((DataPair #typeinCreationMethod 0), (DataPair #typeInPos [0,0,0]), (DataPair #typeInBackLength 0.0), (DataPair #typeInSideLength 0.0), (DataPair #typeInFrontLength 0.0), (DataPair #typeInBackWidth 0.0), (DataPair #typeInSideWidth 0.0), (DataPair #typeInFrontWidth 0.0), (DataPair #typeInHeight 0.0))
		local c_extClassParams2 = #((DataPair #typeinCreationMethod 1), (DataPair #typeInPos [1,2,3]), (DataPair #typeInBackLength 10.0), (DataPair #typeInSideLength 20.0), (DataPair #typeInFrontLength 30.0), (DataPair #typeInBackWidth 5.0), (DataPair #typeInSideWidth 6.0), (DataPair #typeInFrontWidth 7.0), (DataPair #typeInHeight 15.0))
		local b0a= c_ext name:"c_ext0a"
		local b0b= c_ext name:"c_ext0b"
		setObjParams b0a.baseobject c_extClassParams1
		validateObjParams b0a.baseobject c_extClassParams1 message:"validating b0a c_extClassParams1"
		validateObjParams b0b.baseobject c_extClassParams1 message:"validating b0b c_extClassParams1"
		setObjParams b0a.baseobject c_extClassParams2
		validateObjParams b0a.baseobject c_extClassParams2 message:"validating b0a c_extClassParams2"
		validateObjParams b0b.baseobject c_extClassParams2 message:"validating b0b c_extClassParams2"

		-- set instances with various property values, and then test the instances to make sure they have the expected property values
		local createParams1 = #((DataPair #Back_Length 0.0), (DataPair #Side_Length 0.0), (DataPair #Front_Length 0.0), (DataPair #Back_Width 0.0), (DataPair #Side_Width 0.0), (DataPair #Front_Width 0.0), (DataPair #height 0.0), (DataPair #Back_Segments 1), (DataPair #Side_Segments 1), (DataPair #Front_Segments 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1),(DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		local createParams2 = #((DataPair #Back_Length 10.0), (DataPair #Side_Length 25.0), (DataPair #Front_Length 30.0), (DataPair #Back_Width 4.0), (DataPair #Side_Width 9.0), (DataPair #Front_Width 3.0), (DataPair #height 16.0), (DataPair #Back_Segments 2), (DataPair #Side_Segments 8), (DataPair #Front_Segments 32), (DataPair #Width_Segments 6), (DataPair #Height_Segments 18),(DataPair #mapcoords false), (DataPair #realWorldMapSize true))
		local createParams3 = #((DataPair #Back_Length 20.0), (DataPair #Side_Length 15.0), (DataPair #Front_Length 35.0), (DataPair #Back_Width 6.0), (DataPair #Side_Width 13.0), (DataPair #Front_Width 5.0), (DataPair #height 18.0), (DataPair #Back_Segments 4), (DataPair #Side_Segments 16), (DataPair #Front_Segments 64), (DataPair #Width_Segments 12), (DataPair #Height_Segments 24),(DataPair #mapcoords true), (DataPair #realWorldMapSize true))
		-- test added param centerCreate - only comes into play when a length or height is negative
		local createParams4 = #((DataPair #Back_Length 10.0), (DataPair #Side_Length -40.0), (DataPair #Front_Length 30.0), (DataPair #Back_Width 4.0), (DataPair #Side_Width 10.0), (DataPair #Front_Width 15.0), (DataPair #height 5.0), (DataPair #Back_Segments 2), (DataPair #Side_Segments 8), (DataPair #Front_Segments 24), (DataPair #Width_Segments 64), (DataPair #Height_Segments 20), (DataPair #mapcoords false), (DataPair #realWorldMapSize true), (DataPair #centerCreate true) )
		
		local b1 = c_ext name:"c_ext1" pos:[50,50,50]
		setObjParams b1.baseobject createParams1
		validateObjParams b1.baseobject createParams1 message:"validating createParams1"
		assert_false b1.centerCreate -- new param
		-- quick and dirty validation that the resulting mesh is ok
		local m = snapshotasmesh b1
		validateMesh m 32 28 34 [1599.2-.000244141,1600,1600] [0,0,0] message:"validating createParams1 mesh"

		local b2 = c_ext name:"c_ext2" pos:[-50,50,50]
		setObjParams b2.baseobject createParams2
		assert_false b2.centerCreate -- new param
		m = snapshotasmesh b2
		validateMesh m 2426 4464 0 [-84690,134249-0.484375,140708+.359375] [0,0,0] message:"validating createParams2 mesh"

		local b3 = c_ext name:"c_ext3" pos:[50,-50,50]
		setObjParams b3.baseobject createParams3
		validateObjParams b3.baseobject createParams3 message:"validating createParams3"
		assert_false b3.centerCreate -- new param
		m = snapshotasmesh b3
		validateMesh m 7010 13248 7035 [465780+.375,-321338+.375,413590] [344552+.375,61040+.00390625,0] message:"validating createParams3 mesh"
		
		-- test centerCreate
		local b4 = c_ext name:"c_ext4" pos:[20,20,20]
		setObjParams b4.baseobject createParams4
		validateObjParams b4.baseobject createParams4 message:"validating createParams4"
		m = snapshotasmesh b4
		validateMesh m 8666 16544 0 [295240,380516,194985] [0,0,0] message:"validating createParams4 mesh - centerCreate = true"
		b4.centerCreate = false
		m = snapshotasmesh b4
		validateMesh m 8666 16544 0 [295240,33874.5,194985] [0,0,0] message:"validating createParams4 mesh - centerCreate = false"
		b4.centerCreate = true
		
		--Test PBAccessors value change
		local accessorsObj = c_ext Side_Width:10 Back_Length:20 Side_Length:15 Front_Length:12 Back_Width:4 Front_Width:5 height:20 pos:[0, 0, 0]
		local accessorsParams = #((DataPair #Back_Length 20.0), (DataPair #Side_Length 15.0), (DataPair #Front_Length 12.0), (DataPair #Back_Width 4.0), (DataPair #Side_Width 10.0), (DataPair #Front_Width 5.0), (DataPair #height 20.0), (DataPair #Back_Segments 1), (DataPair #Side_Segments 1), (DataPair #Front_Segments 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1),(DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		validateObjParams accessorsObj.baseobject accessorsParams
		accessorsObj.Front_Length = 8
		local accessorsValidateParams = #((DataPair #Back_Length 20.0), (DataPair #Side_Length 15.0), (DataPair #Front_Length 8.0), (DataPair #Back_Width 4.0), (DataPair #Side_Width 8.0), (DataPair #Front_Width 5.0), (DataPair #height 20.0), (DataPair #Back_Segments 1), (DataPair #Side_Segments 1), (DataPair #Front_Segments 1), (DataPair #Width_Segments 1), (DataPair #Height_Segments 1),(DataPair #mapcoords true), (DataPair #realWorldMapSize false))
		validateObjParams accessorsObj.baseobject accessorsValidateParams
		
		-- create and test a scripted controller that points at each of the object's subAnim values
		createScriptedController testObj
		testScriptedController()
		
		-- save/load the file, test the property values
		local res = savemaxfile "$scenes/c_ext_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/c_ext_pb1_pb2_conv_test.max" quiet:true
		assert_true res
		validateObjParams $c_ext1.baseobject createParams1 message:"validating post-load createParams1"
		validateObjParams $c_ext2.baseobject createParams2 message:"validating post-load createParams2"
		validateObjParams $c_ext3.baseobject createParams3 message:"validating post-load createParams3"
		testScriptedController()
		
		-- save using Save To Previous/load the file, test the property values
		res = savemaxfile "$scenes/c_ext_pb1_pb2_conv_test_stp.max" saveAsVersion:2017 quiet:true
		assert_true res
		resetmaxfile #noprompt
		res = loadmaxfile "$scenes/c_ext_pb1_pb2_conv_test_stp.max" quiet:true
		assert_true res
		validateObjParams $c_ext1.baseobject createParams1 message:"validating stp post-load createParams1"
		validateObjParams $c_ext2.baseobject createParams2 message:"validating stp post-load createParams2"
		validateObjParams $c_ext3.baseobject createParams3 message:"validating stp post-load createParams3"
		testScriptedController()

		-- test rescaleWorldUnits
		select $c_ext2
		rescaleWorldUnits 2 #selOnly
		local rescaledParams2 = #((DataPair #Back_Length 20.0), (DataPair #Side_Length 50.0), (DataPair #Front_Length 60.0), (DataPair #Back_Width 8.0), (DataPair #Side_Width 18.0), (DataPair #Front_Width 6.0), (DataPair #height 32.0), (DataPair #Back_Segments 2), (DataPair #Side_Segments 8), (DataPair #Front_Segments 32), (DataPair #Width_Segments 6), (DataPair #Height_Segments 18),(DataPair #mapcoords false), (DataPair #realWorldMapSize true))
		validateObjParams $c_ext2.baseobject rescaledParams2 message:"validating rescaledParams2"
	),
	
	Tests = 
	#(
		test_box_conversion,
		test_cone_conversion,
		test_cylinder_conversion,
		test_grid_conversion,
		test_sphere_conversion,
		test_teapot_conversion,
		test_torus_conversion,
		test_pyramid_conversion,
		test_prism_conversion,
		test_tube_conversion,
		test_chamferbox_conversion,
		test_chamfercyl_conversion,
		test_l_ext_conversion,
		test_c_ext_conversion
	)
)

run_test_fixture UnitTest_Prim_PB1_to_PB2_conversion script:(getThisScriptFilename()) 